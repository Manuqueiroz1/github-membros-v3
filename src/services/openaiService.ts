import OpenAI from 'openai';
import OPENAI_CONFIG, { validateOpenAIConfig } from '../utils/openaiConfig';

export interface ChatMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

export interface StudyPlan {
  title: string;
  level: string;
  objective: string;
  dailyTime: string;
  duration: string;
  topics: string[];
  schedule: {
    week: number;
    focus: string;
    activities: string[];
  }[];
  generatedAt: Date;
}

class OpenAIService {
  private openai: OpenAI | null = null;
  private threadId: string | null = null;
  private isInitialized = false;

  constructor() {
    this.initialize();
  }

  private async initialize() {
    if (!validateOpenAIConfig()) {
      console.warn('‚ö†Ô∏è OpenAI n√£o configurado - usando modo simula√ß√£o');
      return;
    }

    try {
      this.openai = new OpenAI({
        apiKey: OPENAI_CONFIG.apiKey,
        organization: OPENAI_CONFIG.organizationId,
        dangerouslyAllowBrowser: true
      });

      // Criar uma nova thread para a conversa
      const thread = await this.openai.beta.threads.create();
      this.threadId = thread.id;
      this.isInitialized = true;
      
      console.log('‚úÖ OpenAI Service inicializado com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao inicializar OpenAI Service:', error);
    }
  }

  async sendMessage(message: string): Promise<string> {
    // Modo simula√ß√£o se n√£o estiver configurado
    if (!this.isInitialized || !this.openai || !this.threadId) {
      return this.simulateResponse(message);
    }

    try {
      // Adicionar mensagem do usu√°rio √† thread
      await this.openai.beta.threads.messages.create(this.threadId, {
        role: 'user',
        content: message
      });

      // Executar o assistant
      const run = await this.openai.beta.threads.runs.create(this.threadId, {
        assistant_id: OPENAI_CONFIG.assistantId
      });

      // Aguardar conclus√£o
      let runStatus = await this.openai.beta.threads.runs.retrieve(this.threadId, run.id);
      
      while (runStatus.status === 'in_progress' || runStatus.status === 'queued') {
        await new Promise(resolve => setTimeout(resolve, 1000));
        runStatus = await this.openai.beta.threads.runs.retrieve(this.threadId, run.id);
      }

      if (runStatus.status === 'completed') {
        // Buscar mensagens da thread
        const messages = await this.openai.beta.threads.messages.list(this.threadId);
        const lastMessage = messages.data[0];
        
        if (lastMessage.role === 'assistant' && lastMessage.content[0].type === 'text') {
          return lastMessage.content[0].text.value;
        }
      }

      throw new Error(`Run failed with status: ${runStatus.status}`);
    } catch (error) {
      console.error('‚ùå Erro ao enviar mensagem:', error);
      return this.simulateResponse(message);
    }
  }

  async generateStudyPlan(userInfo: {
    level: string;
    objectives: string[];
    availableTime: string;
    interests: string[];
  }): Promise<StudyPlan> {
    const prompt = `
Crie um plano de estudos personalizado de ingl√™s com base nas seguintes informa√ß√µes:

N√≠vel atual: ${userInfo.level}
Objetivos: ${userInfo.objectives.join(', ')}
Tempo dispon√≠vel: ${userInfo.availableTime}
Interesses: ${userInfo.interests.join(', ')}

Por favor, forne√ßa um plano estruturado em formato JSON com:
- T√≠tulo do plano
- N√≠vel e objetivo principal
- Tempo di√°rio recomendado
- Dura√ß√£o total do plano
- Lista de t√≥picos principais
- Cronograma semanal detalhado

Responda APENAS com o JSON, sem texto adicional.
    `;

    try {
      const response = await this.sendMessage(prompt);
      
      // Tentar extrair JSON da resposta
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const planData = JSON.parse(jsonMatch[0]);
        return {
          ...planData,
          generatedAt: new Date()
        };
      }
      
      throw new Error('Resposta n√£o cont√©m JSON v√°lido');
    } catch (error) {
      console.error('‚ùå Erro ao gerar plano:', error);
      return this.generateFallbackPlan(userInfo);
    }
  }

  private simulateResponse(message: string): string {
    const responses = [
      "Entendo sua pergunta! Como sua Teacher Poli, vou te ajudar com isso. Primeiro, vamos focar no seu n√≠vel atual de ingl√™s.",
      "Excelente pergunta! Para criar o melhor plano para voc√™, preciso entender melhor seus objetivos espec√≠ficos.",
      "Perfeito! Vou criar um plano personalizado baseado no que voc√™ me contou. Que tipo de situa√ß√µes voc√™ mais quer praticar?",
      "√ìtimo! Com base nas suas informa√ß√µes, posso ver que voc√™ tem potencial para progredir rapidamente. Vamos estruturar um plano eficiente.",
      "Entendi perfeitamente! Vou adaptar nossa abordagem ao seu estilo de aprendizagem. Prefere focar mais na conversa√ß√£o ou na gram√°tica?"
    ];
    
    return responses[Math.floor(Math.random() * responses.length)];
  }

  private generateFallbackPlan(userInfo: any): StudyPlan {
    return {
      title: `Plano Personalizado - ${userInfo.level}`,
      level: userInfo.level,
      objective: userInfo.objectives[0] || 'Melhorar ingl√™s geral',
      dailyTime: userInfo.availableTime,
      duration: '30 dias',
      topics: [
        'Vocabul√°rio essencial',
        'Gram√°tica b√°sica',
        'Conversa√ß√£o pr√°tica',
        'Compreens√£o auditiva',
        'Escrita funcional'
      ],
      schedule: [
        {
          week: 1,
          focus: 'Fundamentos',
          activities: ['Vocabul√°rio b√°sico', 'Presente simples', 'Conversa√ß√£o inicial']
        },
        {
          week: 2,
          focus: 'Desenvolvimento',
          activities: ['Tempos verbais', 'Listening practice', 'Di√°logos pr√°ticos']
        },
        {
          week: 3,
          focus: 'Aplica√ß√£o',
          activities: ['Situa√ß√µes reais', 'Escrita pr√°tica', 'Pron√∫ncia']
        },
        {
          week: 4,
          focus: 'Consolida√ß√£o',
          activities: ['Review geral', 'Conversa√ß√£o fluente', 'Avalia√ß√£o']
        }
      ],
      generatedAt: new Date()
    };
  }

  // Resetar conversa
  async resetConversation() {
    if (this.openai && this.isInitialized) {
      try {
        const thread = await this.openai.beta.threads.create();
        this.threadId = thread.id;
        console.log('üîÑ Conversa resetada');
      } catch (error) {
        console.error('‚ùå Erro ao resetar conversa:', error);
      }
    }
  }

  // Verificar se est√° configurado
  isConfigured(): boolean {
    return this.isInitialized && this.openai !== null;
  }
}

export const openaiService = new OpenAIService();
export default openaiService;